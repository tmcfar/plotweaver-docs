---
schema_version: "1.0.0"
last_updated: "2025-06-28"
type: "logical_architecture"
maintainer: "PlotWeaver Team"

component_types:
  - agent
  - service
  - manager
  - client
  - storage

components:
  agents:
    ConceptAgent:
      type: "agent"
      description: "Story concept development and foundational narrative structure"
      input: "Project requirements (genre, length, etc.)"
      output: "Story concept in plot/concept.yaml"
      dependencies:
        - PromptManager
        - ProjectConfig
      health_check: "/health/concept-agent"
      scaling:
        cpu_intensive: false
        memory_intensive: true
        concurrent_limit: 1
    
    PlotAgent:
      type: "agent"
      description: "Chapter and scene outline generation with metadata contracts"
      input: "Story concept from ConceptAgent"
      output: "Scene specifications for SceneWriterAgent"
      dependencies:
        - ConceptAgent
        - CharacterAgent
        - PromptManager
      health_check: "/health/plot-agent"
      scaling:
        cpu_intensive: false
        memory_intensive: true
        concurrent_limit: 1

    # [Other agents with similar enhanced metadata]
      
  quality_agents:
    CharacterVoiceAgent:
      type: "agent"
      description: "Ensures dialogue authenticity and voice consistency"
      domain: "Words spoken in dialogue, speech patterns, vocabulary"
      input_validation:
        required_fields:
          - "character_id"
          - "dialogue_text"
        format_rules:
          - "dialogue_text must be string"
          - "character_id must be UUID"
      error_handling:
        retry_limit: 3
        fallback: "pass-through"

    # [Other quality agents with similar metadata]

  orchestration:
    AgentRunner:
      type: "service"
      description: "Coordinates agent execution and workflow"
      functionality: "Manages the agent pipeline and execution flow"
      api:
        run_agent:
          endpoint: "/api/v1/agents/run"
          method: "POST"
          rate_limit: "10/minute"
      scaling:
        stateless: true
        concurrent_limit: 5

    # [Other orchestration components with similar metadata]

component_relationships:
  ConceptAgent:
    depends_on:
      - service: PromptManager
        type: "configuration"
      - service: ProjectConfig
        type: "configuration"
    consumed_by:
      - service: PlotAgent
        type: "data"

  PlotAgent:
    depends_on:
      - service: ConceptAgent
        type: "data"
      - service: CharacterAgent
        type: "data"
    consumed_by:
      - service: SceneWriterAgent
        type: "data"

  # [Other component relationships]

api_contracts:
  agent_execution:
    version: "1.0"
    endpoint: "/api/v1/agents/{agent_name}/execute"
    methods:
      - POST:
          request:
            required:
              - agent_name
              - input_data
            optional:
              - configuration
          response:
            success:
              - result
              - metadata
            error:
              - error_code
              - message

error_handling:
  retry_policies:
    default:
      max_attempts: 3
      backoff: "exponential"
    critical:
      max_attempts: 5
      backoff: "exponential"
      alert: true

monitoring:
  metrics:
    - name: "agent_execution_time"
      type: "histogram"
      labels:
        - "agent_name"
        - "status"
    - name: "quality_check_failures"
      type: "counter"
      labels:
        - "agent_name"
        - "check_type"

scaling_rules:
  agent_pool:
    min_instances: 1
    max_instances: 5
    scaling_metric: "queue_length"
    threshold: 10