---
schema_version: "1.0.0"
last_updated: "2025-06-28"
type: "logical_architecture"
maintainer: "PlotWeaver Team"

component_types:
  - agent
  - service
  - manager
  - client
  - storage

components:
  agents:
    ConceptAgent:
      type: "agent"
      description: "Story concept development and foundational narrative structure"
      input: "Project requirements (genre, length, etc.)"
      output: "Story concept in plot/concept.yaml"
      dependencies:
        - PromptManager
        - ProjectConfig
        - OpenRouterClient
      health_check: "/health/concept-agent"
      scaling:
        cpu_intensive: false
        memory_intensive: true
        concurrent_limit: 1
    
    PlotAgent:
      type: "agent"
      description: "Chapter and scene outline generation with metadata contracts"
      input: "Story concept from ConceptAgent"
      output: "Scene specifications for SceneWriterAgent"
      dependencies:
        - ConceptAgent
        - CharacterAgent
        - PromptManager
        - OpenRouterClient
      health_check: "/health/plot-agent"
      scaling:
        cpu_intensive: false
        memory_intensive: true
        concurrent_limit: 1

    CharacterAgent:
      type: "agent"
      description: "Character profile creation and development"
      input: "Story concept and plot requirements"
      output: "Character profiles in characters/*.yaml"
      dependencies:
        - PromptManager
        - OpenRouterClient
      health_check: "/health/character-agent"
      scaling:
        cpu_intensive: false
        memory_intensive: true
        concurrent_limit: 1

    SceneWriterAgent:
      type: "agent"
      description: "Scene content generation with narrative structure"
      input: "Scene specifications and character profiles"
      output: "Scene content in markdown format"
      dependencies:
        - PlotAgent
        - CharacterAgent
        - PromptManager
        - OpenRouterClient
      health_check: "/health/scene-writer-agent"
      scaling:
        cpu_intensive: false
        memory_intensive: true
        concurrent_limit: 1

    SettingEnrichmentAgent:
      type: "agent"
      description: "Scene enhancement with environmental and sensory details"
      input: "Base scene content"
      output: "Enhanced scene with setting details"
      dependencies:
        - PromptManager
        - OpenRouterClient
      health_check: "/health/setting-enrichment-agent"
      scaling:
        cpu_intensive: false
        memory_intensive: true
        concurrent_limit: 1
      
  quality_agents:
    CharacterVoiceAgent:
      type: "agent"
      description: "Ensures dialogue authenticity and voice consistency"
      domain: "Words spoken in dialogue, speech patterns, vocabulary"
      input_validation:
        required_fields:
          - "character_id"
          - "dialogue_text"
        format_rules:
          - "dialogue_text must be string"
          - "character_id must be UUID"
      error_handling:
        retry_limit: 3
        fallback: "pass-through"
      dependencies:
        - PromptManager
        - OpenRouterClient

    CharacterBodyLanguageAgent:
      type: "agent"
      description: "Validates physical actions and non-verbal communication"
      domain: "Body language, gestures, physical descriptions"
      input_validation:
        required_fields:
          - "scene_content"
          - "character_profiles"
      error_handling:
        retry_limit: 3
        fallback: "pass-through"
      dependencies:
        - PromptManager
        - OpenRouterClient

    CharacterSubtextAgent:
      type: "agent"
      description: "Analyzes hidden meanings and relationship dynamics"
      domain: "Subtext, power dynamics, emotional undertones"
      input_validation:
        required_fields:
          - "scene_content"
          - "character_relationships"
      error_handling:
        retry_limit: 3
        fallback: "pass-through"
      dependencies:
        - PromptManager
        - OpenRouterClient

    SensoryContinuityAgent:
      type: "agent"
      description: "Ensures environmental consistency and sensory details"
      domain: "Setting descriptions, sensory elements, world consistency"
      input_validation:
        required_fields:
          - "scene_content"
          - "setting_data"
      error_handling:
        retry_limit: 3
        fallback: "pass-through"
      dependencies:
        - PromptManager
        - OpenRouterClient

    StyleAgent:
      type: "agent"
      description: "Maintains writing style consistency across scenes"
      domain: "Prose style, tone, narrative voice"
      input_validation:
        required_fields:
          - "scene_content"
          - "style_guide"
      error_handling:
        retry_limit: 3
        fallback: "pass-through"
      dependencies:
        - PromptManager
        - OpenRouterClient

  orchestration:
    AgentRunner:
      type: "service"
      description: "Coordinates agent execution and workflow"
      functionality: "Manages the agent pipeline and execution flow"
      dependencies:
        - GitManager
        - ProjectConfig
        - PromptManager
      scaling:
        stateless: true
        concurrent_limit: 5

    QualityLoop:
      type: "service"
      description: "Manages iterative quality improvement process"
      functionality: "Coordinates quality agents and improvement cycles"
      dependencies:
        - AgentRunner
        - QualityAgents
      scaling:
        stateless: true
        concurrent_limit: 3

  core_services:
    GitManager:
      type: "service"
      description: "Git repository management and version control"
      functionality: "Handles git operations, commits, and repository state"
      dependencies:
        - FileManager
      scaling:
        stateless: false
        concurrent_limit: 1

    ProjectConfig:
      type: "service"
      description: "Project configuration and settings management"
      functionality: "Loads and validates project configuration"
      dependencies: []
      scaling:
        stateless: true
        concurrent_limit: 10

    FileManager:
      type: "service"
      description: "File system operations and content management"
      functionality: "Handles file I/O, directory management"
      dependencies: []
      scaling:
        stateless: true
        concurrent_limit: 5

    MetadataManager:
      type: "service"
      description: "YAML metadata management and validation"
      functionality: "Manages scene metadata and contracts"
      dependencies:
        - FileManager
      scaling:
        stateless: true
        concurrent_limit: 5

    SearchService:
      type: "service"
      description: "Content search and indexing capabilities"
      functionality: "Full-text search across project content"
      dependencies:
        - FileManager
      scaling:
        stateless: true
        concurrent_limit: 3

  external_clients:
    OpenRouterClient:
      type: "client"
      description: "LLM API integration for AI model access"
      functionality: "Handles API calls to OpenRouter service"
      dependencies: []
      scaling:
        stateless: true
        concurrent_limit: 10
        rate_limited: true

  utilities:
    PromptManager:
      type: "service"
      description: "Prompt template management and rendering"
      functionality: "Loads and processes prompt templates"
      dependencies:
        - FileManager
      scaling:
        stateless: true
        concurrent_limit: 10

    ValidationService:
      type: "service"
      description: "Data validation and schema checking"
      functionality: "Validates YAML schemas and data contracts"
      dependencies: []
      scaling:
        stateless: true
        concurrent_limit: 10

component_relationships:
  ConceptAgent:
    depends_on:
      - service: PromptManager
        type: "configuration"
      - service: ProjectConfig
        type: "configuration"
    consumed_by:
      - service: PlotAgent
        type: "data"

  PlotAgent:
    depends_on:
      - service: ConceptAgent
        type: "data"
      - service: CharacterAgent
        type: "data"
    consumed_by:
      - service: SceneWriterAgent
        type: "data"

  # [Other component relationships]

api_contracts:
  agent_execution:
    version: "1.0"
    endpoint: "/api/v1/agents/{agent_name}/execute"
    methods:
      - POST:
          request:
            required:
              - agent_name
              - input_data
            optional:
              - configuration
          response:
            success:
              - result
              - metadata
            error:
              - error_code
              - message

error_handling:
  retry_policies:
    default:
      max_attempts: 3
      backoff: "exponential"
    critical:
      max_attempts: 5
      backoff: "exponential"
      alert: true

monitoring:
  metrics:
    - name: "agent_execution_time"
      type: "histogram"
      labels:
        - "agent_name"
        - "status"
    - name: "quality_check_failures"
      type: "counter"
      labels:
        - "agent_name"
        - "check_type"

scaling_rules:
  agent_pool:
    min_instances: 1
    max_instances: 5
    scaling_metric: "queue_length"
    threshold: 10
